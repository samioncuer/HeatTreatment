@{
    ViewData["Title"] = "Isıl İşlem Grafik";
}
<head>
	<style>
		@* canvas {
			background-image: url(~/img/sistematiklogo.png);
			} *@
	</style>
</head>
<div id="top" style="display: flex;">

	<div id="okuyucular" style=" float: left;">
		<div style="margin:10px 0">
			<a href="javascript:void(0)" class="btn btn-xs btn-primary" onclick="insert_okyc()">Okuyucu Ekle</a>
		</div>
		<table id="grd_okyc"></table>
	</div>
	<div id="grafikler" style="margin-left: 50px;">
		<div style="margin: 10px 0">
			<a href="javascript:void(0)" class="btn btn-xs btn-primary"  onclick="insert_grfk()">Grafik Ekle</a>
		</div>
		<table id="grd_grfk"></table>
	</div>
	
	<div id="noktalar" style="margin-left: 50px;">
		<div style="margin:10px 0">
			<a href="javascript:void(0)" class="btn btn-xs btn-primary" onclick="insert_nkt()">Nokta Ekle</a>
		</div>
		<table id="grd_nkt"></table>
	</div>

	
</div>

	

<!--------------------------------- chart ------------------------------>
	<div style="display:inline-block; margin-left:100px; margin-top:20px;">
		<div id="exp-jpg" style="margin-left:60px; display: none;">
			<a id="download" href="javascript:void(0)" class="btn btn-xs btn-primary" onclick="toJpeg()">JPEG OLUŞTUR</a>
		</div>
		<div id=graph-container>
		
		<canvas id="chart1"></canvas>
		</div>
	</div>
<!--------------------------------------- chart   --------------------------------- -->
	

@section scripts {

<script>
	  
$(function(){
	$('#grd_grfk').datagrid({
		title:'GRAFİKLER',
		iconCls:'icon-edit',
		width:440,
		height:270,
		singleSelect:true,
		idField:'id',
		url: BaseURL + '/Grafik/GetGrafik',
		method:'get',
		columns:[[
			/*{field:'id',title:'Grafik ID',width:70,align:'left'},*/
			{field:'grafikadi',title:'Grafik Adı',width:100,align:'center',editor:'textbox'},
			/*{field:'zamanaralik',title:'Zaman Aralığı',width:110,align:'center',editor:'timespinner',
				formatter: function(value,row,index){
					return value.hours + ':' + value.minutes;
				}
			}, */
			{field:'baslama',title:'başlama zamanı',width:230,align:'center',editor:'datetimebox',
			formatter: function(value,row,index){
					return moment(value).format('MMMM Do YYYY, h:mm:ss a');
				}
			},
			{field:'action',title:'Action',width:110,align:'center',
				formatter:function(value,row,index){
					if (row.editing){
						var s = '<a href="javascript:void(0)" onclick="saverow_grfk(this)">Save</a> ';
						var c = '<a href="javascript:void(0)" onclick="cancelrow_grfk(this)">Cancel</a>';
						return s+c;
					} else {
						var e = '<a href="javascript:void(0)" onclick="editrow_grfk(this)">Edit</a> ';
						var d = '<a href="javascript:void(0)" onclick="deleterow_grfk(this)">Delete</a>';
						return e+d;
					}
				}
			}
		]],
		onEndEdit:function(index,row,changes){
			var ed = $(this).datagrid('getEditor', {
				index: index,
				field: 'id'
			});
			$('#grd_grfk').datagrid('reload');
			if(changes.grafikadi == "" || changes.zamanaralik == "" || changes.baslama=="")
				alert("Boş alanları doldurup baştan değişiklik yapınız.");
		},
		onBeforeEdit:function(index,row){
			row.editing = true;
			$(this).datagrid('refreshRow', index);
		},
		onAfterEdit:function(index,row){
			row.editing = false;
			var asd = "03:00";
			row.zamanaralik = null;
			//////////////////////////
				var xx = JSON.stringify(row);
				$.post( BaseURL + '/Grafik/UpdateGrafik',{ model:xx, timespan:asd }
					,function(result){
						console.log(result);
					}).fail(function(e){
						console.log(e);
					}
				);
			///////////////////////////////
			$(document).ready(function () { 
			setTimeout(function () { 
				$('#grd_grfk').datagrid('reload');
			}, 1000); 
			}); 
				
		},
		onCancelEdit:function(index,row){
			row.editing = false;
			$(this).datagrid('refreshRow', index);
		},
		onClickRow: function(index,row){
			var xx = row.id;
			var noktaJson = $.post( BaseURL + '/Nokta/GetNoktaById',{ grafikId:xx }
				,function(result){
					$('#grd_nkt').datagrid('loadData',result);
				}).fail(function(e){
					console.log(e);
				}
			)
		},
		onDblClickRow: function(index,row){
			var xx = row.id;
			var grf_baslama = row.baslama;
			var noktaJson = $.post( BaseURL + '/Nokta/GetNoktaById',{ grafikId:xx }
				,function(nokta){
					var jqxhrs = $.get( BaseURL + "/Okuyucu/GetOkuyucu", function(okuyucu) {
							draw(nokta,okuyucu,grf_baslama);
							$('#exp-jpg').show();
						});
				}).fail(function(e){
					console.log(e);
				}
			)
		}
	}); 

	$('#grd_okyc').datagrid({
		title:'OKUYUCULAR',
		iconCls:'icon-edit',
		width:320,
		height:270,
		singleSelect:true,
		idField:'id',
		url: BaseURL + '/Okuyucu/GetOkuyucu',
		method:'get',
		columns:[[
			{field:'grup',title:'Grup',width:60,align:'center',editor:'textbox'},
			{field:'okuyucuadi',title:'Okuyucu Adı',width:90,align:'center',editor:'textbox'},
			{field:'arti',title:'FARK',width:50,align:'center',editor:'numberbox'},
			//{field:'eksi',title:'EKSİ',width:50,align:'center',editor:'numberbox'},
			{field:'action',title:'Action',width:110,align:'center',
				formatter:function(value,row,index){
					if (row.editing){
						var s = '<a href="javascript:void(0)" onclick="saverow_okyc(this)">Save</a> ';
						var c = '<a href="javascript:void(0)" onclick="cancelrow_okyc(this)">Cancel</a>';
						return s+c;
					} else {
						var e = '<a href="javascript:void(0)" onclick="editrow_okyc(this)">Edit</a> ';
						var d = '<a href="javascript:void(0)" onclick="deleterow_okyc(this)">Delete</a>';
						return e+d;
					}
				}
			}
		]],
		onEndEdit:function(index,row,changes){
			var ed = $(this).datagrid('getEditor', {
				index: index,
				field: 'id'
			});
			//console.log(changes);
			$('#grd_okyc').datagrid('reload');
			if(changes.grup == "" || changes.okuyucuadi == "" || changes.arti=="" || changes.eksi == "" ){
				alert("Boş alanları doldurup baştan değişiklik yapınız.");
			}
			if(typeof changes.grup != 'undefined' && changes.grup.length > 4 )
				alert("Grup adı 4 harften kısa olmak zorunda." );
		},
		onBeforeEdit:function(index,row){
			row.editing = true;
			$(this).datagrid('refreshRow', index);
		},
		onAfterEdit:function(index,row){
			row.editing = false;
			//////////////////////////
				var xx = JSON.stringify(row);
				
				$.post( BaseURL + '/Okuyucu/UpdateOkuyucu',{ model:xx }
					,function(result){
						console.log(result);
					}).fail(function(e){
						console.log(e);
					}
				);
			/////////////////////////////
			$(document).ready(function () { 
			setTimeout(function () { 
				$('#grd_okyc').datagrid('reload');
			}, 1000); 
			}); 
		},
		onCancelEdit:function(index,row){
			row.editing = false;
			$(this).datagrid('refreshRow', index);
			}
		});

$('#grd_nkt').datagrid({
		//autoLoad:false,
		title:'NOKTALAR',
		iconCls:'icon-edit',
		width:590,
		height:270,
		singleSelect:true,
		idField:'id',
		//url:'https://localhost:5001/Nokta/GetNokta',
		//datasource: noktaJson;
		//method:'get',
		data: {},
		columns:[[
			{field:'sirano',title:'Sıra No',width:60,align:'center',editor:'numberbox'},
			/*{field:'grafikid',title:'Grafik ID',width:75,align:'center',editor:'numberbox'},*/
			{field:'baslamasicaklik',title:'Baş. Sıcaklık',width:110,align:'center',editor:'numberbox'},
			{field:'bitissicaklik',title:'Bit. Sıcaklık',width:110,align:'center',editor:'numberbox'},
			{field:'beklemesuresi',title:'Bekleme Süresi',width:120,align:'center',editor:'timespinner',
				formatter: function(value,row,index){
					return value.hours + ':' + value.minutes;
				}
			},
			{field:'hizi',title:'HIZI',width:70,align:'center',editor:'numberbox'},
			//{field:'arti',title:'ARTI',width:55,align:'center',editor:'numberbox'},
			//{field:'eksi',title:'EKSİ',width:55,align:'center',editor:'numberbox'},
			{field:'action',title:'Action',width:110,align:'center',
				formatter:function(value,row,index){
					if (row.editing){
						var s = '<a href="javascript:void(0)" onclick="saverow_nkt(this)">Save</a> ';
						var c = '<a href="javascript:void(0)" onclick="cancelrow_nkt(this)">Cancel</a>';
						return s+c;
					} else {
						var e = '<a href="javascript:void(0)" onclick="editrow_nkt(this)">Edit</a> ';
						var d = '<a href="javascript:void(0)" onclick="deleterow_nkt(this)">Delete</a>';
						return e+d;
					}
				}
			}
		]],
		onEndEdit:function(index,row,changes){
			var ed = $(this).datagrid('getEditor', {
				index: index,
				field: 'id'
			});
			$('#grd_nkt').datagrid('reload');
			if(changes.sirano == "" || changes.baslamasicaklik == "" || changes.bitissicaklik=="" || changes.beklemesuresi == "" || changes.hizi=="" || changes.arti=="" || changes.eksi == "" ){
				alert("Boş alanları doldurup baştan değişiklik yapınız.");
			}
			if(changes.hizi == 0)
				alert("Hız alanı -0- olamaz." );
		}, 
		onBeforeEdit:function(index,row){
			row.editing = true;
			$(this).datagrid('refreshRow', index);
		},
		onAfterEdit:function(index,row){
			row.editing = false;
			var asc = row.beklemesuresi;
			row.beklemesuresi = null;
			//////////////////////////
			var nn = JSON.stringify(row);
			$.post( BaseURL + '/Nokta/UpdateNokta',{ model:nn, timespan:asc }
				,function(result){
					console.log(result);
				}).fail(function(e){
					console.log(e);
				}
			);
			$(document).ready(function () { 
			setTimeout(function () { 
			var p = row.grafikid;
			var noktaJson = $.post( BaseURL + '/Nokta/GetNoktaById',{ grafikId:p }
				,function(result){
					$('#grd_nkt').datagrid('loadData',result);
					var jqxhrs = $.post( BaseURL + "/Grafik/GetGrafikBaslamaById", { grafikId:p }
							,function(res) {
								var jqxhrs = $.get( BaseURL + "/Okuyucu/GetOkuyucu", function(okuyucu) {
								draw(result,okuyucu,res);
								$('#exp-jpg').show();
							});
						});
					}).fail(function(e){
						console.log(e);
					}
				);

				}, 1100); 
			}); 
			///////////////////////////// 
		}, 
		onCancelEdit:function(index,row){
			row.editing = false;
			$(this).datagrid('refreshRow', index);
		}
	});
});
function getRowIndex(target){
	var tr = $(target).closest('tr.datagrid-row');
	return parseInt(tr.attr('datagrid-row-index'));
	}
function editrow_grfk(target){
	$('#grd_grfk').datagrid('beginEdit', getRowIndex(target));
	}
function editrow_okyc(target){
	$('#grd_okyc').datagrid('beginEdit', getRowIndex(target));
	}
function editrow_nkt(target){
	$('#grd_nkt').datagrid('beginEdit', getRowIndex(target));
	}
function deleterow_grfk(target){
	$.messager.confirm('Confirm','Are you sure?',function(r){
		if (r){
			var row = $('#grd_grfk').datagrid('getSelected');
			if(row.id==null){
				$('#grd_grfk').datagrid('deleteRow', getRowIndex(target));
			}
			else{
				var xx = row.id;
				$.post( BaseURL + '/Grafik/DeleteGrafik',{ id: xx }
					,function(result){
						console.log(result);
					}).fail(function(e){
						console.log(e);
					}
				);
			}
		$(document).ready(function () { 
			setTimeout(function () { 
				$('#grd_grfk').datagrid('reload');
			}, 1000); 
			}); 
		}
	});
	}
function deleterow_okyc(target){
	$.messager.confirm('Confirm','Are you sure?',function(r){
		if (r){
			var row = $('#grd_okyc').datagrid('getSelected');
			if(row.id==null){
				$('#grd_okyc').datagrid('deleteRow', getRowIndex(target));
			}
			else{
				var xx = row.id;
				$.post(BaseURL + '/Okuyucu/DeleteOkuyucu',{ id: xx }
					,function(result){
						console.log(result);
					}).fail(function(e){
						console.log(e);
					}
				);
			}
		$(document).ready(function () { 
			setTimeout(function () { 
				$('#grd_okyc').datagrid('reload');
			}, 1000); 
			}); 
		}
		});
	}
function deleterow_nkt(target){
	$.messager.confirm('Confirm','Are you sure?',function(r){
		if (r){
			var row = $('#grd_nkt').datagrid('getSelected');
			if(row.id == null){
				$('#grd_nkt').datagrid('deleteRow', getRowIndex(target));
			}
			else {
				var xx = row.id;
				$.post( BaseURL + '/Nokta/DeleteNokta', { id: xx }
					,function(result){
						console.log(result);
					}).fail(function(e){
						console.log(e);
					}
				);
				
			}
		$(document).ready(function () { 
			setTimeout(function () { 
			var p = row.grafikid;
			var noktaJson = $.post( BaseURL + '/Nokta/GetNoktaById',{ grafikId:p }
				,function(result){
					$('#grd_nkt').datagrid('loadData',result);
					var jqxhrs = $.post( BaseURL + "/Grafik/GetGrafikBaslamaById", { grafikId:p }
							,function(res) {
								var jqxhrs = $.get( BaseURL + "/Okuyucu/GetOkuyucu", function(okuyucu) {
								draw(result,okuyucu,res);
								$('#exp-jpg').show();
							});
						});
					}).fail(function(e){
						console.log(e);
					}
				);
				}, 1100); 
			}); 
		}
	});
	}

function saverow_grfk(target){
	
	$('#grd_grfk').datagrid('endEdit', getRowIndex(target));
	}
function saverow_okyc(target){
	$('#grd_okyc').datagrid('endEdit', getRowIndex(target));
	}
function saverow_nkt(target){
	$('#grd_nkt').datagrid('endEdit', getRowIndex(target));
	}
function cancelrow_grfk(target){
	$('#grd_grfk').datagrid('cancelEdit', getRowIndex(target));
	}
function cancelrow_okyc(target){
	$('#grd_okyc').datagrid('cancelEdit', getRowIndex(target));
	}
function cancelrow_nkt(target){
	$('#grd_nkt').datagrid('cancelEdit', getRowIndex(target));
	}
function insert_grfk(){
	var row = $('#grd_grfk').datagrid('getSelected');
	if (row){
		var index = $('#grd_grfk').datagrid('getRowIndex', row);
	} else {
		index = 0;
	}
	var nr = $('#grd_grfk').datagrid('getRows');
	index = nr.length + 1;
	var d = new Date();
	var _time = d.getTime();
	console.log(_time);
	$('#grd_grfk').datagrid('insertRow', {
		index: index,
		row:{
			grafikadi: 'yeni grafik',
			zamanaralik: 0000,
			başlama: moment(),
		}
	});
	$('#grd_grfk').datagrid('selectRow',index);
	$('#grd_grfk').datagrid('beginEdit',index);
	}
function insert_okyc(){
	var row = $('#grd_okyc').datagrid('getSelected');
	if (row){
		var index = $('#grd_okyc').datagrid('getRowIndex', row);
	} else {
		index = 0;
	}
	var nr = $('#grd_okyc').datagrid('getRows');
	index = nr.length + 1;
	$('#grd_okyc').datagrid('insertRow', {
		index: index,
		row:{
			grup: 'yeni grup',
			okuyucuadi: 'yeni okuyucu',
			arti: 0,
			eksi: 0,
		}
	});
	$('#grd_okyc').datagrid('selectRow',index);
	$('#grd_okyc').datagrid('beginEdit',index);
	} 
function insert_nkt(){
	var row = $('#grd_nkt').datagrid('getSelected');
	if (row){
		var index = $('#grd_nkt').datagrid('getRowIndex', row);
	} else {
		index = 0;
	}
	var nr = $('#grd_nkt').datagrid('getRows');
	
	index = nr.length + 1;
	var grfk = $('#grd_grfk').datagrid('getSelected');
	$('#grd_nkt').datagrid('insertRow', {
		index: index,
		row:{
			sirano: index,
			grafikid: grfk.id,
			baslamasicaklik: nr[nr.length-1].bitissicaklik,
			bitissicaklik: 0,
			beklemesuresi: 0000,
			hizi: 100,
			arti: 0,
			eksi: 0,
		}
	});
	$('#grd_nkt').datagrid('selectRow',index);
	$('#grd_nkt').datagrid('beginEdit',index);
	}

	// ------------------CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART
	// ------------------CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART
	// ------------------CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART CHART
	function draw(noktalar, okuyucular, grf_Baslama){
	//chart.destroy();
	$('#chart2').append('<canvas id="chart1"><canvas>');
	function sort_by_key(array, key)
		{
		return array.sort(function(a, b)
			{
			var x = a[key]; var y = b[key];
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		});
	}
	function sort_by_key_number(array, key)
		{
		return array.sort(function(a, b)
			{
			var x = a[key]; var y = b[key];
			return ((x > y) ? -1 : ((x < y) ? 1 : 0));
		});
	}
	noktalar = sort_by_key(noktalar, 'sirano');
	
	function generateData() { /// okuyucular bağımsız olduğu için ataması içeride yapılıcak
			
			var unit = "minute";

			function unitLessThanDay() {
				return unit === 'minute';
			} 

			function beforeNineThirty(date) {
				return date.hour() < 9 || (date.hour() === 9 && date.minute() < 30);
			}

			function randomNumber(min, max) {
				return Math.random() * (max - min) + min;
			}

			function randomBar(date, sicaklik) {  
				
				var open = randomNumber(sicaklik - 2, sicaklik + 2).toFixed(2); //toFixed sayının virgülden sonraki basamak sayısı
				return {
					t: date.valueOf(),
					y: open
				};
			}
			

			/////////////////  DATA ÜRETİMİ  
			/////////////////  DATA ÜRETİMİ  
			/////////////////  DATA ÜRETİMİ  
			/////////////////  DATA ÜRETİMİ  
			
			okuyucular = sort_by_key_number(okuyucular, 'arti');
			var x = [];
			for (k=0; k<okuyucular.length; k++){

				var okFark = okuyucular[k].arti;
				var okAdi = okuyucular[k].okuyucuadi;
				var date = moment(grf_Baslama); //orjinal hali ('Jan 01 1990', 'MMM DD')
				var calcTime = moment(grf_Baslama);
				var data = [];
				var lessThanDay = unitLessThanDay();
				////////////////////////////////////////////////// ------ generateDataset bu hizzada olucak okuyucular for u kapanmadan önce

				for(i=0; i<noktalar.length; i++){
					var bas = noktalar[i].baslamasicaklik;
					var bit = noktalar[i].bitissicaklik;
					var hiz = noktalar[i].hizi;
					var bek = noktalar[i].beklemesuresi.totalMinutes;
					var arti = noktalar[i].arti;
					var eksi = noktalar[i].eksi;
					
					

					if(bek == 0)
					{

						if(bas<bit)
						{	
							
							var time = Math.ceil( (  (60*Math.abs(bas - bit) )/hiz ) );
							
							calcTime = calcTime.clone().add(time, unit).startOf(unit);
							var sicaklik = 10*(Math.abs(bas - bit))/time;
							
							var b = bas+ okFark;
							
							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {
								
								
								data.push(randomBar(date, b));
								b = b + sicaklik;
								
							}
						}
						if(bas>bit)
						{     //burası düzenlenecek

							var decTime = Math.ceil( ( 60*( Math.abs(bas - bit) - (okFark/4) ) ) / hiz );  // 87
							var a = decTime%10; // 7
							var b = 10 - a; // 3
							if(a<5)
								decTime = decTime - a; 
							else
								decTime = decTime + b; 
							
							calcTime = calcTime.clone().add(decTime, unit).startOf(unit);
							var sicaklik = 10*( Math.abs(bas - bit) )/decTime; 
							var b = bas;

							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {
								
								data.push(randomBar(date, b));
								b = b - sicaklik;
								
							}
						}
						if(bas=bit)
						{
							calcTime = calcTime.add(bek, unit).startOf(unit);
							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {
								data.push(randomBar(date, bit));
							}
						}
					//console.log(data);
					}

					if(bek > 0)
					{
						if(bas<bit)
						{
							var time = Math.floor( ( (60*Math.abs(bas - bit))/hiz ) );
							
							var incTime = Math.floor( ( 60*( Math.abs(bas - bit) - (okFark/4) ) ) / hiz );
							
							var timeDif = time - incTime;
							
							
							bek = bek + timeDif;
							
							
							calcTime = calcTime.clone().add(incTime, unit).startOf(unit);
							var sicaklik = 10*Math.abs(bas - bit)/incTime;
							var b = bas + okFark;
							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {

								data.push(randomBar(date, b));
								b = b + sicaklik;
							}
							@* calcTime = calcTime.clone().add(bek, unit).startOf(unit);
							for (; date.isBefore(calcTime); date = date.clone().add(1, unit).startOf(unit)) {

								data.push(randomBar(date, bit));
								
							} *@
						}
						///// only here Left
						if(bas>bit)
						{
							var decTime = Math.ceil( ( 60*( Math.abs(bas - bit) - (okFark/2) ) ) / hiz );
							calcTime = calcTime.clone().add(decTime, unit).startOf(unit);
							var sicaklik = 10*( Math.abs(bas - bit) )/decTime;
							var b = bas;

							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {
								
								data.push(randomBar(date, b));
								b = b - sicaklik;
								
							}
						}
						if(bas=bit)
						{
							//console.log("buraya girdi");
							calcTime = calcTime.add(bek, unit).startOf(unit);
							for (; date.isBefore(calcTime); date = date.clone().add(10, 'minutes')) {
								data.push(randomBar(date, bit));
							}
						}
					//console.log(data);
					}
					
				}
				
				x.push(
					{
						label: okAdi, 
						borderColor: getRandomColor(),
						backgroundColor: color(window.chartColors.white).alpha(0.5).rgbString(),
						data: data, 
						type: 'line',
						pointRadius: 0,
						fill: false,
						lineTension: 0,
						borderWidth: 0.4
					}
				)
			} 
			return x;
		}   
		
			/////////////////  DATA ÜRETİMİ  END
			/////////////////  DATA ÜRETİMİ  END
			/////////////////  DATA ÜRETİMİ  EEND
			/////////////////  DATA ÜRETİMİ  EENDD
		
		/////////////////// okuyucu dataset

		function getRandomColor() {
			var color = '#';
			for (var i = 0; i < 6; i++) {
				color += Math.floor(Math.random() * 10);
			}
			return color;
		}

		
		/////////////////// okuyucu dataset
		$('#chart1').remove();
		$('#graph-container').append('<canvas id="chart1"  style="margin-top: 10px;"><canvas>');
		
		var ctx = document.getElementById('chart1').getContext('2d');
		ctx.canvas.width = 1300;
		ctx.canvas.height = 540;

		var now = grf_Baslama;
		var m_now = moment(now).format('MMMM Do YYYY, h:mm:ss a');
 		var color = Chart.helpers.color;
		var cfg = {
			data: {

			datasets:  generateData(),
			},
			options: {
				
				layout: {
					padding: {
						top: 60
				}
				},
				animation: {
					duration: 0
				},
				title: {
					position: 'bottom',
					display: true,
					text: m_now,
				},
				scales: {
					xAxes: [{
						type: 'time',
						distribution: 'series',
						offset: true,
						ticks: {
							major: {
								enabled: true,
								fontStyle: 'bold'
							},
							source: 'data',
							autoSkip: false, // burası true idi
							autoSkipPadding: 0,
							sampleSize: 20,
							fontSize: 7,
           					minRotation: 60 }
						@* },
						afterBuildTicks: function(scale, ticks) {
							var majorUnit = scale._majorUnit;
							var firstTick = ticks[0];
							var i, ilen, val, tick, currMajor, lastMajor;

							val = moment(ticks[0].value);
							if ((majorUnit === 'minute' && val.second() === 0)
									|| (majorUnit === 'hour' && val.minute() === 0)
									|| (majorUnit === 'day' && val.hour() === 9)
									|| (majorUnit === 'month' && val.date() <= 3 && val.isoWeekday() === 1)
									|| (majorUnit === 'year' && val.month() === 0)) {
								firstTick.major = true;
							} else {
								firstTick.major = false;
							}
							lastMajor = val.get(majorUnit);

							for (i = 1, ilen = ticks.length; i < ilen; i++) {
								tick = ticks[i];
								val = moment(tick.value);
								currMajor = val.get(majorUnit);
								tick.major = currMajor !== lastMajor;
								lastMajor = currMajor;
							}
							return ticks;
						} *@
					}],
					yAxes: [{
						gridLines: {
							drawBorder: false
						},
						scaleLabel: {
							display: true,
							labelString: 'Temperature'
						}
					}]
				},
				tooltips: {
					intersect: false,
					mode: 'index',
					callbacks: {
						label: function(tooltipItem, myData) {
							var label = myData.datasets[tooltipItem.datasetIndex].label || '';
							if (label) {
								label += ': ';
							}
							label += parseFloat(tooltipItem.value).toFixed(2);
							return label;
						}
					}
				}
			}
		};

		var backgroundColor = 'white';
		Chart.plugins.register({
   			beforeDraw: function(c) {
				ctx.fillStyle = backgroundColor;
				ctx.fillRect(0, 0, c.chart.width, c.chart.height);
				},
			afterDraw: function(c) {
				ctx.textAlign = 'center';
				ctx.textBaseline = 'center';
				ctx.font = "18px Arial";
				ctx.fillStyle = "black";
				ctx.fillText('-KARTAL BOMBE-' + '                                                                                  ' +'Work Number:', c.chart.width /2, 20);
				ctx.restore();
							}
			});  
		
			var chart = new Chart(ctx, cfg);
			chart.update();

			$(function toJpeg(){
			/*Get image of canvas element*/
			
			var url_base64jp = chart.toBase64Image();
			/*get download button (tag: <a></a>) */
			var a =  document.getElementById("download");
			/*insert chart image url to download button (tag: <a></a>) */
			a.download = 'isil-islem-grafik.png';
			a.href = url_base64jp;
			//a.click();
			});
		
		}
	
		</script>
	}